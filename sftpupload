@Configuration
@Slf4j
public class SolaceConfig {


    @Bean
    @SneakyThrows
    public SolConnectionFactory connectionFactory(@Value("${solace.broker.url}") String brokerUrl,
                                                  @Value("${solace.broker.vpn-name}") String vpnName,
                                                  @Value("${solace.client-username}") String username,
                                                  @Value("${solace.client-password}") String password) {
        return SolJmsUtility.createConnectionFactory(brokerUrl, vpnName, username, password, new Hashtable<>());
    }

    @Bean
    public ConnectionFactory cachedConnectionFactory(SolConnectionFactory connectionFactory) {
        CachingConnectionFactory cachingFactory = new CachingConnectionFactory(connectionFactory);
        // Optional: Set cache size for sessions or message producers/consumers
        cachingFactory.setSessionCacheSize(1); // Example cache size for sessions
        return cachingFactory;
    }

    @Bean
    @SneakyThrows
    public DefaultMessageListenerContainer transactionEventMessageListener(SolConnectionFactory connectionFactory,
                                                                           @Value("${transaction.event.queue}") String queueName) {

        final DefaultMessageListenerContainer container = new DefaultMessageListenerContainer();
        container.setConnectionFactory(connectionFactory);
        container.setDestinationName(queueName);
        container.setSessionAcknowledgeMode(SupportedProperty.SOL_CLIENT_ACKNOWLEDGE);
        container.setMessageListener(new MessageListener() {
            @Override
            @SneakyThrows
            public void onMessage(Message message) {
                log.info("message: {}", message);
            }
        });
        log.info("Subscribed to queue: {} mode is: CLIENT_ACKNOWLEDGE", queueName);
        return container;
    }

}
